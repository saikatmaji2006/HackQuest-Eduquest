version: '3.8'

<<<<<<< HEAD
services:
=======
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    ports:
      - 8000:8000

>>>>>>> f41f548 (frontend)
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: eduquest_api
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
    environment:
      - FLASK_APP=app.py
<<<<<<< HEAD
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - SECRET_KEY=${SECRET_KEY:-dev-key-change-in-production}
      - DEFAULT_API_KEY=${DEFAULT_API_KEY:-your-api-key-here}
      - ADMIN_API_KEY=${ADMIN_API_KEY:-your-admin-key-here}
=======
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
>>>>>>> f41f548 (frontend)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/ai/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - eduquest-net

<<<<<<< HEAD
=======
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

>>>>>>> f41f548 (frontend)
networks:
  eduquest-net:
    driver: bridge

